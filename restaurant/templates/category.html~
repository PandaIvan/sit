{% load static %}
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ category.name }} - AROY AROY</title>
    <link rel="stylesheet" href="{% static 'css/styles.css' %}">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .product-card {
            max-width: 450px;
            margin: 15px;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        .product-card img {
            width: 100%;
            height: 150px;
            object-fit: cover;
        }
        .product-info {
            padding: 15px;
            text-align: center;
        }
        .quantity-controls {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-top: 10px;
        }
        .notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 15px;
            background-color: #4caf50;
            color: white;
            border-radius: 5px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
            z-index: 1000;
            font-size: 16px;
        }
        .notification.error {
            background-color: #f44336;
        }
    </style>
</head>
<body>
    {% include 'common_header.html' %}

    <div class="container mx-auto px-4 py-6 grid grid-cols-1  gap-10">
        <h2 class="category-title">{{ category.name }}</h2>

        <div class="product-grid flex flex-wrap justify-center">
            {% for product in products %}
                <form method="post" action="{% url 'add_to_cart' product.id %}">
                    {% csrf_token %}
                    <div class="product-card">
                        <img src="{% if product.image %}{{ product.image.url }}{% else %}{% static 'images/default.jpg' %}{% endif %}" alt="{{ product.name }}  ">
                        <div class="product-info">
                            <h3 class="product-name">{{ product.name }}</h3>
                            <p class="product-description mt-2">{{ product.description }}</p>
                            <p class="product-price mt-2">{{ product.price }} руб.</p>
                            <div class="quantity-controls mt-4">
                                <button type="button" class="decrement bg-red-500 text-white px-3 py-1 rounded minus-button">-</button>
                                <input type="number" name="quantity" value="1" class="quantity-input w-16 text-center mx-2 border border-gray-300 rounded" min="1" max="100" placeholder="1" step="1">
                                <button type="button" class="increment bg-green-500 text-white px-3 py-1 rounded plus-button">+</button>
                            </div>
                            <button type="submit" class="add-to-cart bg-red-500 text-white px-4 py-2 rounded-lg mt-4">
                                Добавить в корзину
                            </button>
                        </div>
                    </div>
                </form>
            {% endfor %}
        </div>

        <div class="text-center mt-10">
            <a href="{% url 'menu' %}" class="bg-red-700 text-white px-6 py-3 rounded-lg">Вернуться в меню</a>
        </div>
    </div>

    {% include 'common_footer.html' %}

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Обработчик кнопок +/- для изменения количества
            const cardContainer = document.querySelector('.product-grid');

            cardContainer.addEventListener('click', (event) => {
                const target = event.target;
                const card = target.closest('.product-card');
                if (!card) return;

                const input = card.querySelector('.quantity-input');
                let currentValue = parseInt(input.value, 10);

                if (target.classList.contains('increment')) {
                    input.value = currentValue + 1;
                } else if (target.classList.contains('decrement')) {
                    if (currentValue > 1) {
                        input.value = currentValue - 1;
                    }
                }
            });

            // Обработчик кнопки "Добавить в корзину"
            const addToCartButtons = document.querySelectorAll('.add-to-cart');

            addToCartButtons.forEach(button => {
                button.addEventListener('click', async function (event) {
                    event.preventDefault();  // Отменить стандартную отправку формы

                    const form = button.closest('form');
                    const formData = new FormData(form);

                    try {
                        const response = await fetch(form.action, {
                            method: 'POST',
                            body: formData,
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest',
                            },
                        });

                        if (response.ok) {
                            showNotification('Товар успешно добавлен в корзину!');
                        } else {
                            showNotification('Ошибка при добавлении товара. Попробуйте снова.', true);
                        }
                    } catch (error) {
                        showNotification('Ошибка при добавлении товара. Попробуйте снова.', true);
                    }
                });
            });

            // Функция отображения уведомления
            function showNotification(message, isError = false) {
                const notification = document.createElement('div');
                notification.className = `notification ${isError ? 'error' : 'success'}`;
                notification.textContent = message;

                document.body.appendChild(notification);

                setTimeout(() => {
                    notification.remove();
                }, 3000);
            }
        });
    </script>
</body>
</html>
